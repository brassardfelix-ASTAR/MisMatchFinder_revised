{"$message_type":"diagnostic","message":"unused import: `MismatchType`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/bamreader.rs","byte_start":358,"byte_end":370,"line_start":17,"line_end":17,"column_start":44,"column_end":56,"is_primary":true,"text":[{"text":"use crate::bamreader::mismatch::{Mismatch, MismatchType};","highlight_start":44,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/bamreader.rs","byte_start":356,"byte_end":370,"line_start":17,"line_end":17,"column_start":42,"column_end":56,"is_primary":true,"text":[{"text":"use crate::bamreader::mismatch::{Mismatch, MismatchType};","highlight_start":42,"highlight_end":56}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/bamreader.rs","byte_start":347,"byte_end":348,"line_start":17,"line_end":17,"column_start":33,"column_end":34,"is_primary":true,"text":[{"text":"use crate::bamreader::mismatch::{Mismatch, MismatchType};","highlight_start":33,"highlight_end":34}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/bamreader.rs","byte_start":370,"byte_end":371,"line_start":17,"line_end":17,"column_start":56,"column_end":57,"is_primary":true,"text":[{"text":"use crate::bamreader::mismatch::{Mismatch, MismatchType};","highlight_start":56,"highlight_end":57}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `MismatchType`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/bamreader.rs:17:44\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m17\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse crate::bamreader::mismatch::{Mismatch, MismatchType};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `HashSet`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src/output/vcfwriter.rs","byte_start":53,"byte_end":60,"line_start":2,"line_end":2,"column_start":34,"column_end":41,"is_primary":true,"text":[{"text":"use std::collections::{BTreeMap, HashSet};","highlight_start":34,"highlight_end":41}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src/output/vcfwriter.rs","byte_start":51,"byte_end":60,"line_start":2,"line_end":2,"column_start":32,"column_end":41,"is_primary":true,"text":[{"text":"use std::collections::{BTreeMap, HashSet};","highlight_start":32,"highlight_end":41}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/output/vcfwriter.rs","byte_start":42,"byte_end":43,"line_start":2,"line_end":2,"column_start":23,"column_end":24,"is_primary":true,"text":[{"text":"use std::collections::{BTreeMap, HashSet};","highlight_start":23,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src/output/vcfwriter.rs","byte_start":60,"byte_end":61,"line_start":2,"line_end":2,"column_start":41,"column_end":42,"is_primary":true,"text":[{"text":"use std::collections::{BTreeMap, HashSet};","highlight_start":41,"highlight_end":42}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `HashSet`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0msrc/output/vcfwriter.rs:2:34\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m2\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0muse std::collections::{BTreeMap, HashSet};\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"2 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 2 warnings emitted\u001b[0m\n\n"}
